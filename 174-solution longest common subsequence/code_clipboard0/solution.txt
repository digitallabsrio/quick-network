def longest_common_subsequence(str1, str2):
    n = len(str1)
    m = len(str2)
    dp = [[-1 for x in range(m)] for y in range(n)]
    return longest_common_subsequence_helper(str1, str2, 0, 0, dp)

# Helper function with updated signature: i is current index in str1, j is current index in str2
def longest_common_subsequence_helper(str1, str2, i, j, dp): 
    if i == len(str1) or j == len(str2): 
        return 0

    elif dp[i][j] == -1:
        if str1[i] == str2[j]:  
            dp[i][j] = 1 + longest_common_subsequence_helper(str1, str2, i+1, j+1, dp)
        
        else:
            dp[i][j] = max(
                longest_common_subsequence_helper(str1, str2, i+1, j, dp), 
                longest_common_subsequence_helper(str1, str2, i, j+1, dp)
            )

    return dp[i][j]


# Driver code
def main():
    first_strings = ["qstw", "setter", "abcde", "partner", "freedom"]
    second_strings = ["gofvn", "bat", "apple", "park", "redeem"]

    for i in range(len(first_strings)):
        print(i + 1, ".\t str1: ", first_strings[i], sep="")
        print("\t str2: ", second_strings[i], sep="")
        print("\n\t The length of the longest common subsequence is: ", longest_common_subsequence(first_strings[i], second_strings[i]), sep="")
        print("-" * 100)

if __name__ == '__main__':
    main()