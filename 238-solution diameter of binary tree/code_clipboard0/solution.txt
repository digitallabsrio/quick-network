from TreeNode import *
from BinaryTree import *

# function to recursively calculate the height of the tree
# and update the diameter
def diameter_helper(node, diameter):
    if node is None:
        return 0, diameter
    else:
        lh, diameter = diameter_helper(node.left, diameter)
        rh, diameter = diameter_helper(node.right, diameter)

        diameter = max(diameter, lh + rh)

        return max(lh, rh) + 1, diameter

def diameter_of_binaryTree(root):
    diameter = 0
    
    if not root:
        return 0

    _, diameter = diameter_helper(root, diameter)

    return diameter

# Driver code
def main():
    list_of_trees = [ [TreeNode(2), TreeNode(1), TreeNode(4), TreeNode(3), TreeNode(5), TreeNode(6), TreeNode(7)],
                    [TreeNode(1), TreeNode(2), TreeNode(3), TreeNode(4), TreeNode(5), TreeNode(6), TreeNode(7), TreeNode(8), TreeNode(9)],
                    [TreeNode(45), TreeNode(32), TreeNode(23), TreeNode(21), TreeNode(18), TreeNode(1)],
                    [TreeNode(5), TreeNode(3), TreeNode(4), TreeNode(1), TreeNode(2), TreeNode(6), TreeNode(7), TreeNode(8), TreeNode(9)],
                    [TreeNode(-1), TreeNode(-5), TreeNode(-8), TreeNode(-3), TreeNode(1), TreeNode(5), TreeNode(3)],
                    [TreeNode(9), TreeNode(7), None, None, TreeNode(1), TreeNode(8), TreeNode(10), None, TreeNode(12)]
    ]

    input_trees = []
    for list_of_nodes in list_of_trees:
        tree = BinaryTree(list_of_nodes)
        input_trees.append(tree)

    y = 1
    for tree in input_trees:
        print(y, ".\tInput Tree:", sep = "")
        display_tree(tree.root)
        print("\tDiameter of the tree: ", diameter_of_binaryTree(tree.root), sep="")
        print("-"*100)
        y += 1

if __name__ == '__main__':
    main()