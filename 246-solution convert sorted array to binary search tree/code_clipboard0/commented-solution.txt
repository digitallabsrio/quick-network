from TreeNode import *

def sorted_array_to_bst_helper(nums, low, high):
    # Base case: if low > high, then there are no more elements to add to the BST
    if(low > high):
        return None;
    # Calculate the middle index
    mid = low + (high - low) //2 
    # Please note that mid can also be calculated as (low + high)//2
    # However, it may not be calculated correctly for very large arrays
    
    # Center value of sorted array as the root of the BST
    root = TreeNode(nums[mid])
    
    # Recursively add the elements in nums[low:mid-1] to the left subtree of root
    root.left = sorted_array_to_bst_helper(nums, low, mid - 1)
    # Recursively add the elements in nums[mid+1:high] to the right subtree of root
    root.right = sorted_array_to_bst_helper(nums, mid + 1, high)
    # Return the root node
    return root

def sorted_array_to_bst(nums):
    # call the helper function  
    return sorted_array_to_bst_helper(nums, 0, len(nums) - 1)
    
# Driver code
def main():
    
    input_arrays = [
        [11, 22, 33, 44, 55, 66, 77, 88],
        [25, 50, 75, 100, 125, 350],
        [1, 2, 3],
        [1, 2, 3, 4],
        [-10, -3, 0, 5, 9],
        [1, 3]
        
    ]

    indx = 1
    for i in input_arrays:
        
        print(indx, ".\tSorted Array: ", i, sep="")
        indx += 1
        tr = sorted_array_to_bst(i)
        print("\n\tBinary search tree:")
        display_tree(tr)
        print("-"*100)


if __name__ == '__main__':
    main()