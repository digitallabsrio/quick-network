def spiral_order(matrix):
    # Calculate the total number of rows and columns
    rows, cols = len(matrix), len(matrix[0])

    # Set up pointers to traverse the matrix
    row, col = 0, -1

    # Set the initial direction to 1 for moving left to right
    direction = 1 

    # Create an array to store the elements in spiral order
    result = []

    # Traverse the matrix in a spiral order
    while rows > 0 and cols > 0:
        # Move horizontally in one of two directions:
        #   1. Left to right (if direction == 1)
        #   2. Right to left (if direction == -1)
        # Increment the col pointer to move horizontally
        for _ in range(cols):
            col += direction
            result.append(matrix[row][col])
        rows -= 1

        # Move vertically in one of two directions:
        #   1. Top to bottom (if direction == 1)
        #   2. Bottom to top (if direction == -1)
        # Increment the row pointer to move vertically
        for _ in range(rows):
            row += direction
            result.append(matrix[row][col])
        cols -= 1

        # Flip the direction for the next traversal
        direction *= -1 
        
    return result

# Driver code
def main():
    inputs = [[[1]], [[6], [2]], [[2, 14, 8], [12, 7, 14]],
              [[3, 1, 1], [15, 12, 13], [4, 14, 12], [10, 5, 11]],
              [[10, 1, 14, 11, 14], [13, 4, 8, 2, 13], [10, 19, 1, 6, 8], [20, 10, 8, 2, 12], [15, 6, 8, 8, 18]]]

    for i in range(len(inputs)):
        print(i + 1, ".\tMatrix:", sep="")
        print_matrix(inputs[i])

        print("\n\tSpiral order:", spiral_order(inputs[i]))
        print("-" * 100)
          
if __name__ == "__main__":
    main()