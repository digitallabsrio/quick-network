# Import required functions
from collections import deque
from BinaryTree import *
from TreeNode import *


def printing_queue(current):
    if current:
        output = "["
        for x in current:
            output += str(x.data) + ", "
        output = output[:-2] + "]"
        return output
    return "[]"


# Using two queues
def level_order_traversal(root):
    result = ""
    # Print 'None' if the root is empty
    if not root:
        result = "None"
        return result
    else:
        print("\n\tInitializing the queues")
        # Declaring an array of two queues
        queues = [deque(), deque()]
        print("\t\tqueues array: ", queues, sep = "")
        # Initializing the current and next queues
        current_queue = queues[0]
        next_queue = queues[1]
        print("\t\tCurrent queue: ", current_queue)
        print("\t\tNext queue: ", next_queue)

        # Enqueuing the root node into the current queue and setting
        # level to zero
        print("\t\tEnqueuing the root node into the current queue")
        current_queue.append(root)
        print("\t\t\tUpdated current queue: ", printing_queue(current_queue))
        level_number = 0
        print("\t\t\tLevel number: ", level_number)

        print("\n\tIterating the current queue")
        n = 0
        while current_queue:
            print("\t\tLoop iteration ", n, sep = "")
            n += 1
            # Dequeuing and printing the first element of queue
            print("\t\t\tDequeuing from the current queue: ", printing_queue(current_queue), " ⟶ ", sep = "", end = "")
            temp = current_queue.popleft()
            print(printing_queue(current_queue))
            print("\t\t\t\tPopped node: ", temp.data, sep = "")
            result += str(temp.data)
            print("\t\t\t\tAppending the popped node to the results string: ", result, sep = "")
            # Adding dequeued node's children to the next queue
            print("\t\t\tAdding ", temp.data, "'s children to the next queue", sep = "")
            if temp.left:
                next_queue.append(temp.left)
                print("\t\t\t\tEnqueuing the left child, ", temp.left.data, sep = "")
                print("\t\t\t\t\tNext queue: ", printing_queue(next_queue), sep = "")
            if temp.right:
                next_queue.append(temp.right)
                print("\t\t\t\tEnqueuing the right child, ", temp.right.data, sep = "")
                print("\t\t\t\t\tNext queue: ", printing_queue(next_queue), sep = "")

            # When the current queue is empty, we increase the level, print a new line
            # and swap the current and next queues
            print("\n\t\t\tCurrent queue: ", printing_queue(current_queue))
            print("\t\t\tNext queue: ", printing_queue(next_queue))
            if not current_queue:
                print("\t\t\tCurrent queue is empty, swapping the queues") 
                level_number += 1
                if next_queue:
                    result += " : "
                    print("\t\t\t\tMoving to the next level, appending a colon to the result string  ⟶ ", result)
                current_queue = queues[level_number % 2]
                next_queue = queues[(level_number + 1) % 2]
                print("\t\t\t\tIncrementing level number: ", level_number - 1, " ⟶ ", level_number, sep = "")
                print("\t\t\t\tCurrent queue after swapping: ", printing_queue(current_queue))
                print("\t\t\t\tNext queue after swapping: ", printing_queue(next_queue))
            else:
                result += ", "
        return result


# driver code

def main():
    test_cases_roots = []

    input1 = [
        TreeNode(100),
        TreeNode(50),
        TreeNode(200),
        TreeNode(25),
        TreeNode(75),
        TreeNode(350)
    ]
    tree1 = BinaryTree(input1)
    test_cases_roots.append(tree1.root)

    input2 = [
        TreeNode(25),
        TreeNode(50),
        None,
        TreeNode(100),
        TreeNode(200),
        TreeNode(350)
    ]
    tree2 = BinaryTree(input2)
    test_cases_roots.append(tree2.root)

    input3 = [
        TreeNode(350),
        None,
        TreeNode(100),
        None,
        TreeNode(50),
        TreeNode(25)
    ]
    tree3 = BinaryTree(input3)
    test_cases_roots.append(tree3.root)

    tree4 = BinaryTree([TreeNode(100)])
    test_cases_roots.append(tree4.root)

    test_cases_roots.append(None)

    for i in range(len(test_cases_roots)):
        if i > 0:
            print()
        print(i + 1, ".\tBinary Tree")
        display_tree(test_cases_roots[i])
        print("\n\tLevel order traversal: ")
        print("\t",level_order_traversal(test_cases_roots[i]))
        print("\n" + '-' * 100)


if __name__ == '__main__':
    main()