{
  "course_name": "Grokking Coding Interview Patterns in Python - Learn Interactively",
  "course_overview": "With thousands of potential questions to account for, preparing for the coding interview can feel like an impossible challenge. Yet with a strategic approach, coding interview prep doesn’t have to take more than a few weeks. Stop drilling endless sets of practice problems, and prepare more efficiently by learning coding interview patterns.\n\nThis course teaches you the underlying patterns behind common coding interview questions. By learning these essential patterns, you will be able to unpack and answer any problem the right way — just by assessing the problem statement. This approach was created by FAANG hiring managers to help you prepare for the typical rounds of interviews at major tech companies like Apple, Google, Meta, Microsoft, and Amazon.\n\nBefore long, you will have the skills you need to unlock even the most challenging questions, grok the coding interview, and level up your career with confidence.\n\nThis course is also available in JavaScript, C++, Java, and Go — with more coming soon!",
  "course_folder": "grokking coding interview patterns in python",
  "course_lessons": [
    "0-course overview",
    "1-who should take this course",
    "2-two pointers introduction",
    "3-valid palindrome",
    "4-solution valid palindrome",
    "5-sum of three values",
    "6-solution sum of three values",
    "7-remove nth node from end of list",
    "8-solution remove nth node from end of list",
    "9-sort colors",
    "10-solution sort colors",
    "11-reverse words in a string",
    "12-solution reverse words in a string",
    "13-valid palindrome ii",
    "14-fast and slow pointers introduction",
    "15-happy number",
    "16-solution happy number",
    "17-linked list cycle",
    "18-solution linked list cycle",
    "19-middle of the linked list",
    "20-solution middle of the linked list",
    "21-circular array loop",
    "22-solution circular array loop",
    "23-find the duplicate number",
    "24-solution find the duplicate number",
    "25-palindrome linked list",
    "26-solution palindrome linked list",
    "27-sliding window introduction",
    "28-repeated dna sequences",
    "29-solution repeated dna sequences",
    "30-find maximum in sliding window",
    "31-solution find maximum in sliding window",
    "32-minimum window subsequence",
    "33-solution minimum window subsequence",
    "34-longest repeating character replacement",
    "35-solution longest repeating character replacement",
    "36-minimum window substring",
    "37-solution minimum window substring",
    "38-longest substring without repeating characters",
    "39-solution longest substring without repeating characters",
    "40-minimum size subarray sum",
    "41-solution minimum size subarray sum",
    "42-best time to buy and sell stock",
    "43-merge intervals introduction",
    "44-merge intervals",
    "45-solution merge intervals",
    "46-insert interval",
    "47-solution insert interval",
    "48-interval list intersections",
    "49-solution interval list intersections",
    "50-employee free time",
    "51-solution employee free time",
    "52-task scheduler",
    "53-solution task scheduler",
    "54-meeting rooms ii",
    "55-in place reversal of a linked list introduction",
    "56-reverse linked list",
    "57-solution reverse linked list",
    "58-reverse nodes in k group",
    "59-solution reverse nodes in k group",
    "60-reverse linked list ii",
    "61-solution reverse linked list ii",
    "62-reorder list",
    "63-solution reorder list",
    "64-swapping nodes in a linked list",
    "65-solution swapping nodes in a linked list",
    "66-reverse nodes in even length groups",
    "67-solution reverse nodes in even length groups",
    "68-swap nodes in pairs",
    "69-two heaps introduction",
    "70-maximize capital",
    "71-solution maximize capital",
    "72-find median from a data stream",
    "73-solution find median from a data stream",
    "74-sliding window median",
    "75-solution sliding window median",
    "76-schedule tasks on minimum machines",
    "77-solution schedule tasks on minimum machines",
    "78-k way merge introduction",
    "79-merge sorted array",
    "80-solution merge sorted array",
    "81-kth smallest number in m sorted lists",
    "82-solution kth smallest number in m sorted lists",
    "83-find k pairs with smallest sums",
    "84-solution find k pairs with smallest sums",
    "85-merge k sorted lists",
    "86-solution merge k sorted lists",
    "87-kth smallest element in a sorted matrix",
    "88-solution kth smallest element in a sorted matrix",
    "89-top k elements introduction",
    "90-kth largest element in a stream",
    "91-solution kth largest element in a stream",
    "92-reorganize string",
    "93-solution reorganize string",
    "94-k closest points to origin",
    "95-solution k closest points to origin",
    "96-top k frequent elements",
    "97-solution top k frequent elements",
    "98-kth largest element in an array",
    "99-solution kth largest element in an array",
    "100-top k frequent words",
    "101-modified binary search introduction",
    "102-binary search",
    "103-solution binary search",
    "104-search in rotated sorted array",
    "105-solution search in rotated sorted array",
    "106-first bad version",
    "107-solution first bad version",
    "108-random pick with weight",
    "109-solution random pick with weight",
    "110-find k closest elements",
    "111-solution find k closest elements",
    "112-single element in a sorted array",
    "113-solution single element in a sorted array",
    "114-search in rotated sorted array ii",
    "115-subsets introduction",
    "116-subsets",
    "117-solution subsets",
    "118-permutations",
    "119-solution permutations",
    "120-letter combinations of a phone number",
    "121-solution letter combinations of a phone number",
    "122-generate parentheses",
    "123-solution generate parentheses",
    "124-find k sum subsets",
    "125-greedy techniques introduction",
    "126-jump game i",
    "127-solution jump game i",
    "128-boats to save people",
    "129-solution boats to save people",
    "130-gas stations",
    "131-solution gas stations",
    "132-two city scheduling",
    "133-solution two city scheduling",
    "134-minimum number of refueling stops",
    "135-solution minimum number of refueling stops",
    "136-jump game ii",
    "137-backtracking introduction",
    "138-n queens",
    "139-solution n queens",
    "140-word search",
    "141-solution word search",
    "142-house robber iii",
    "143-solution house robber iii",
    "144-restore ip addresses",
    "145-solution restore ip addresses",
    "146-flood fill",
    "147-solution flood fill",
    "148-sudoku solver",
    "149-matchsticks to square",
    "150-dynamic programming introduction",
    "151-0 1 knapsack",
    "152-solution 0 1 knapsack",
    "153-coin change",
    "154-solution coin change",
    "155-n th tribonacci number",
    "156-solution n th tribonacci number",
    "157-partition equal subset sum",
    "158-solution partition equal subset sum",
    "159-counting bits",
    "160-solution counting bits",
    "161-01 matrix",
    "162-solution 01 matrix",
    "163-house robber ii",
    "164-solution house robber ii",
    "165-maximum product subarray",
    "166-solution maximum product subarray",
    "167-combination sum",
    "168-solution combination sum",
    "169-word break",
    "170-solution word break",
    "171-palindromic substrings",
    "172-solution palindromic substrings",
    "173-longest common subsequence",
    "174-solution longest common subsequence",
    "175-word break ii",
    "176-solution word break ii",
    "177-decode ways",
    "178-solution decode ways",
    "179-climbing stairs",
    "180-cyclic sort introduction",
    "181-missing number",
    "182-solution missing number",
    "183-first missing positive",
    "184-solution first missing positive",
    "185-find the corrupt pair",
    "186-solution find the corrupt pair",
    "187-challenge find the first k missing positive numbers",
    "188-topological sort introduction",
    "189-compilation order",
    "190-solution compilation order",
    "191-alien dictionary",
    "192-solution alien dictionary",
    "193-verifying an alien dictionary",
    "194-solution verifying an alien dictionary",
    "195-course schedule ii",
    "196-solution course schedule ii",
    "197-course schedule",
    "198-solution course schedule",
    "199-find all possible recipes from given supplies",
    "200-matrices introduction",
    "201-set matrix zeros",
    "202-solution set matrix zeros",
    "203-rotate image",
    "204-solution rotate image",
    "205-spiral matrix",
    "206-solution spiral matrix",
    "207-where will the ball fall",
    "208-solution where will the ball fall",
    "209-stacks introduction",
    "210-basic calculator",
    "211-solution basic calculator",
    "212-remove all adjacent duplicates in string",
    "213-solution remove all adjacent duplicates in string",
    "214-minimum remove to make valid parentheses",
    "215-solution minimum remove to make valid parentheses",
    "216-exclusive execution time of functions",
    "217-solution exclusive execution time of functions",
    "218-flatten nested list iterator",
    "219-solution flatten nested list iterator",
    "220-implement queue using stacks",
    "221-solution implement queue using stacks",
    "222-valid parentheses",
    "223-graphs introduction",
    "224-network delay time",
    "225-solution network delay time",
    "226-paths in maze that lead to same room",
    "227-solution paths in maze that lead to same room",
    "228-clone graph",
    "229-solution clone graph",
    "230-graph valid tree",
    "231-solution graph valid tree",
    "232-bus routes",
    "233-solution bus routes",
    "234-tree depth first search introduction",
    "235-flatten binary tree to linked list",
    "236-solution flatten binary tree to linked list",
    "237-diameter of binary tree",
    "238-solution diameter of binary tree",
    "239-serialize and deserialize binary tree",
    "240-solution serialize and deserialize binary tree",
    "241-invert binary tree",
    "242-solution invert binary tree",
    "243-binary tree maximum path sum",
    "244-solution binary tree maximum path sum",
    "245-convert sorted array to binary search tree",
    "246-solution convert sorted array to binary search tree",
    "247-build binary tree from preorder and inorder traversal",
    "248-solution build binary tree from preorder and inorder traversal",
    "249-binary tree right side view",
    "250-solution binary tree right side view",
    "251-lowest common ancestor in a binary tree",
    "252-solution lowest common ancestor in a binary tree",
    "253-validate binary search tree",
    "254-solution validate binary search tree",
    "255-maximum depth of binary tree",
    "256-kth smallest element in a bst",
    "257-tree breadth first search introduction",
    "258-level order traversal of binary tree",
    "259-solution level order traversal of binary tree",
    "260-binary tree zigzag level order traversal",
    "261-solution binary tree zigzag level order traversal",
    "262-populating next right pointers in each node",
    "263-solution populating next right pointers in each node",
    "264-vertical order traversal of a binary tree",
    "265-solution vertical order traversal of a binary tree",
    "266-symmetric tree",
    "267-solution symmetric tree",
    "268-word ladder",
    "269-solution word ladder",
    "270-connect all siblings of a binary tree",
    "271-trie introduction",
    "272-implement trie",
    "273-solution implement trie",
    "274-search suggestions system",
    "275-solution search suggestions system",
    "276-replace words",
    "277-solution replace words",
    "278-design add and search words data structure",
    "279-solution design add and search words data structure",
    "280-word search ii",
    "281-solution word search ii",
    "282-lexicographical numbers",
    "283-hash maps introduction",
    "284-design hashmap",
    "285-solution design hashmap",
    "286-fraction to recurring decimal",
    "287-solution fraction to recurring decimal",
    "288-logger rate limiter",
    "289-solution logger rate limiter",
    "290-next greater element",
    "291-solution next greater element",
    "292-isomorphic strings",
    "293-solution isomorphic strings",
    "294-longest palindrome",
    "295-knowing what to track introduction",
    "296-palindrome permutation",
    "297-solution palindrome permutation",
    "298-valid anagram",
    "299-solution valid anagram",
    "300-design tic tac toe",
    "301-solution design tic tac toe",
    "302-group anagrams",
    "303-solution group anagrams",
    "304-maximum frequency stack",
    "305-solution maximum frequency stack",
    "306-first unique character in a string",
    "307-solution first unique character in a string",
    "308-find all anagrams in a string",
    "309-solution find all anagrams in a string",
    "310-longest palindrome by concatenating two letter words",
    "311-solution longest palindrome by concatenating two letter words",
    "312-ransom note",
    "313-union find introduction",
    "314-redundant connection",
    "315-solution redundant connection",
    "316-number of islands",
    "317-solution number of islands",
    "318-most stones removed with same row or column",
    "319-solution most stones removed with same row or column",
    "320-longest consecutive sequence",
    "321-solution longest consecutive sequence",
    "322-last day where you can still cross",
    "323-solution last day where you can still cross",
    "324-regions cut by slashes",
    "325-solution regions cut by slashes",
    "326-accounts merge",
    "327-solution accounts merge",
    "328-minimize malware spread",
    "329-solution minimize malware spread",
    "330-evaluate division",
    "331-custom data structures introduction",
    "332-snapshot array",
    "333-solution snapshot array",
    "334-time based key value store",
    "335-solution time based key value store",
    "336-implement lru cache",
    "337-solution implement lru cache",
    "338-insert delete getrandom o 1",
    "339-solution insert delete getrandom o 1",
    "340-min stack",
    "341-solution min stack",
    "342-lfu cache",
    "343-bitwise manipulation introduction",
    "344-find the difference",
    "345-solution find the difference",
    "346-complement of base 10 number",
    "347-solution complement of base 10 number",
    "348-flipping an image",
    "349-solution flipping an image",
    "350-single number",
    "351-solution single number",
    "352-two single numbers",
    "353-solution two single numbers",
    "354-encode and decode strings",
    "355-solution encode and decode strings",
    "356-reverse bits",
    "357-challenge yourself introduction",
    "358-shortest bridge",
    "359-number of connected components in an undirected graph",
    "360-median of two sorted arrays",
    "361-pacific atlantic water flow",
    "362-contains duplicate",
    "363-maximum subarray",
    "364-two sum",
    "365-find minimum in rotated sorted array",
    "366-non overlapping intervals",
    "367-meeting rooms",
    "368-largest rectangle in histogram",
    "369-subtree of another tree",
    "370-sort list",
    "371-number of 1 bits",
    "372-container with the most water",
    "373-evaluate reverse polish notation",
    "374-4sum",
    "375-loud and rich",
    "376-product of array except self",
    "377-longest increasing subsequence",
    "378-sum of two integers",
    "379-majority element",
    "380-unique paths",
    "381-longest palindromic substring",
    "382-permutations ii",
    "383-number of provinces",
    "384-linked list cycle ii",
    "385-minimum flips to make the binary string alternate",
    "386-lemonade change",
    "387-house robber",
    "388-find all numbers disappeared in an array",
    "389-find all duplicates in an array",
    "390-same tree",
    "391-design in memory file system",
    "392-design file system",
    "393-asteroid collision",
    "394-rotting oranges",
    "395-add binary",
    "396-multiply strings",
    "397-where to go from here"
  ],
  "repo_name": "quick-network"
}
