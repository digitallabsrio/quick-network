def num_of_decodings(decode_str):
    str_len = len(decode_str)
    # initialize the dp array with all 0s
    dp = [0] * (str_len + 1)
    # there is only one way to decode an empty string
    dp[0] = 1
    # the first element of the dp array is 1 if the first character 
    # of the string is not '0', otherwise it's 0
    if decode_str[0] != '0':
        dp[1] = 1 
    else:
        return 0

    # iterate through the input string starting from the 2nd character
    for i in range(2, str_len + 1):
        # if the current character is not '0', add the number of ways 
        # to decode the substring without the current character
        if decode_str[i - 1] != '0':
            dp[i] += dp[i - 1]
        # if the substring of the current and previous characters is a valid 
        # two-digit number, add the number of ways to decode the substring 
        # without the current and previous characters
        if decode_str[i - 2] == '1' or \
          (decode_str[i - 2] == '2' and decode_str[i - 1] <= '6'):
            dp[i] += dp[i - 2]

    # return the number of ways to decode the input string
    return dp[str_len]

# Driver code
def main():
    decode_str = ["124", "123456", "11223344", "0", "0911241", "10203", "999901"]

    for i in range(len(decode_str)):
        print(i + 1, f".\t There are {num_of_decodings(decode_str[i])} ways in which we can decode the string: '", 
                        decode_str[i], "'", sep="")
        print("-" * 100)

if __name__ == '__main__':
    main()