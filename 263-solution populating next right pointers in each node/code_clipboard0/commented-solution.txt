from EduBinaryTree import *
from EduTreeNode import *

def populate_next_pointers(root):
    # If root is None, return None
    if not root: 
        return root
    
    # Initialize the mostleft node as the root
    mostleft = root 

    # Loop until there are no more levels below
    while mostleft.left:
        # Initialize the current node as the mostleft node of the current level
        current = mostleft
        # Loop through the current level
        while current:

            # Connect the current node's left child to its right child
            current.left.next = current.right
            # If there is a next node on the same level
            if current.next:
                # Connect the current node's right child to the left child of its next node
                current.right.next = current.next.left
            
            # Move to the next node on the same level
            current = current.next
        # Move down to the next level
        mostleft = mostleft.left
    # Return the modified root node with the connections between nodes
    return root

# Driver code
def main():
    input = [EduTreeNode(100), EduTreeNode(50), EduTreeNode(200), EduTreeNode(25), EduTreeNode(75), EduTreeNode(300), EduTreeNode(10)]
    tree = EduBinaryTree(input)

    populate_next_pointers(tree.root)
    index_val = 0
    print("Binary tree:")
    display_tree(tree.root)
    print()
    for node_value in input:
        index_val += 1
        tmp = EduBinaryTree.get_next_node(tree.root, node_value.data)
        sib_node = "None"
        if (tmp != None):
            sib_node = str(tmp.data)
        print(index_val, ".", sep="", end="")
        print("\tCurrent Node Value: ", node_value.data, sep="")
        print("\tNext Node Value: ", sib_node, sep="")
        print("-"*100, "\n", sep="")


if __name__ == '__main__':
    main()