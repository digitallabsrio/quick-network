import collections
from collections import defaultdict
from union_find import *


def remove_stones(stones):
    # using offset for y coordinate to avoid 
    # any possible clash with x coordinates
    offset = 100000
    stone = UnionFind()

    # iterating over all stones
    for x, y in stones:
        stone.union(x, (y + offset))  
    
    # creating a set of all the roots of the connected groups
    groups = set()
    for i in stone.parents:
        groups.add(stone.find(i))

    return len(stones) - len(groups)

# driver code
def main():
    stones = [[[0, 0], [0, 1], [1, 2], [2, 2], [3, 3]],
        [[0, 0], [2, 2], [3, 3]],
        [[0, 1], [2, 1], [3, 0]],
        [[1, 0], [2, 1], [2, 3], [3, 1], [3, 3]],
        [[1, 2], [2, 0], [2, 2], [3, 3]]]

    for i in range(len(stones)):
        print(str(i+1)+".\tMaximum stones which can be removed from "+str(stones[i]) + " are: ", remove_stones(stones[i]))
        print("-" * 100)
  
if __name__ == '__main__':
    main()