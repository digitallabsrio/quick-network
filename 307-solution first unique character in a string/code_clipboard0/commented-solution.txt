def first_unique_char(s):

    character_count = {}  # declaring a hash map
    string_length = len(s)  # storing the length of the input string

    # loop to iterate over the length of input string
    for i in range(string_length):
        # check if the character exists in the hash map
        if s[i] in character_count:
            # if the character already exists, 
            # increase the counter by adding + 1
            character_count[s[i]] += 1
        else:
            # if the character doesn't exists, 
            # set the count of letter to 1
            character_count[s[i]] = 1

    # this loop will check the first occurrence of a letter whose count is of 1
    for i in range(string_length):
        # the first character to have a count of 1 should be returned
        if character_count[s[i]] == 1:
            return i

    # return -1 if all occurrences of letters have a count greater than 1
    return -1


# driver code
def main():
    str_array = ["baefeab", "aabbcc", "dajhfiuebdafsdhdgaj",
                 "xyurtwxwtryua", "aeiouqwertyauieotweryqq", "awsjuhfajwfnkag"]

    for i in range(len(str_array)):
        print(i + 1, ".\t Input string: \"", str_array[i], "\"", sep="")
        result = first_unique_char(str_array[i])
        print("\t Finding a unique character .....")
        print("\t Index of the first unique character is: ", result, sep="")
        print("-" * 100)


if __name__ == "__main__":
    main()