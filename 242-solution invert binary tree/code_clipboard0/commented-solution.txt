from BinaryTree import *
from TreeNode import *

# global variables to support step-by-step printing
change = 0
master_root = None

# Function to mirror binary tree
def mirror_binary_tree(root):
    global change, master_root
    # Base case: end recursive call if current node is null
    if not root:
        return None

    # We will do a post-order traversal of the binary tree.
    if root.left:
        mirror_binary_tree(root.left)

    if root.right:
        mirror_binary_tree(root.right)

    # Let's swap the left and right nodes at current level.
    root.left, root.right = root.right, root.left

    # Only to demonstrate step-by-step operation of the solution
    if master_root and (root.left or root.right):
        change += 1
        print("\n\tChange ", change, ", at node ", root.data, ":", sep="")
        display_tree(master_root)

    return root

# Driver code
def main():
    global change, master_root
    
    input_trees = [
        [TreeNode(100), TreeNode(50), TreeNode(200), TreeNode(25), TreeNode(75), TreeNode(125), TreeNode(350)],
        [TreeNode(100), TreeNode(50), TreeNode(200), TreeNode(25), TreeNode(110), TreeNode(125), TreeNode(350)],
        [TreeNode(100), TreeNode(50), TreeNode(200), TreeNode(25), TreeNode(75), TreeNode(90), TreeNode(350)],
        [TreeNode(25), TreeNode(50), TreeNode(75), TreeNode(100), TreeNode(125), TreeNode(350)],
        [TreeNode(350), TreeNode(125), TreeNode(100), TreeNode(75), TreeNode(50), TreeNode(25)],
        [TreeNode(100)],
        [TreeNode(1), TreeNode(2), None, TreeNode(3), None, TreeNode(4)],
        [TreeNode(1), TreeNode(2), TreeNode(3), TreeNode(4), None, None, TreeNode(5)],
        []
    ]

    indx = 1
    for i in input_trees:
        tree = BinaryTree(i)

        print(indx, ".\tBinary Tree:", sep="")
        indx += 1
        display_tree(tree.root)
        change = 0
        master_root = tree.root
        mirror_binary_tree(tree.root)
        print("\n\tMirrored binary tree:")
        display_tree(tree.root)
        print("-"*100)


if __name__ == '__main__':
    main()