def fraction_to_decimal(numerator, denominator):
    result, remainder_map = "", {}
    print("\n\tnumerator:", numerator)
    print("\tdenominator:", denominator)
    # if the numerator is 0, then return 0 in the string
    if numerator == 0:
        print("\tAs numerator is 0, so return 0.")
        return '0'

        # If the numerator or denominator is negative, then append "-" to the result
    if (numerator < 0) ^ (denominator < 0):
        print("\tAs numerator or denominator is negative. Appending - to the result")
        result += '-'
        
        # Make the numerator and denominator positive after adding "-" to the result
        numerator = abs(numerator)
        denominator = abs(denominator)




# Driver code
def main():
    inputs = [(0, 4), (4, 2), (5, 333), (2, 3), (47, 18),
              (93, 7), (-5, 333), (47, -18), (-4, -2)]

    for i in range(len(inputs)):

        print(i + 1,  ".\tInput: fraction_to_decimal", inputs[i], sep="")
        result = fraction_to_decimal(inputs[i][0], inputs[i][1])
        print("-"*100)


if __name__ == '__main__':
    main()