from BinaryTree import *
from collections import defaultdict, deque

def vertical_order(root):
    if root is None:
        return []

    node_list = defaultdict(list)
    min_column = 0
    max_index = 0
    queue = deque([(root, 0)])

    while queue:
        node, column = queue.popleft()

        if node is not None:
            temp = node_list[column]
            temp.append(node.data)
            node_list[column] = temp

            min_column = min(min_column, column)
            max_index = max(max_index, column)

            queue.append((node.left, column - 1))
            queue.append((node.right, column + 1))

    return [node_list[x] for x in range(min_column, max_index + 1)]

# Driver code
if __name__ == '__main__':
    
    list_of_trees = [
        [TreeNode(100), TreeNode(50), TreeNode(200), TreeNode(25), TreeNode(75), TreeNode(300), TreeNode(10), TreeNode(350), TreeNode(15)],
        [TreeNode(20), TreeNode(40), TreeNode(50), TreeNode(90), TreeNode(67), TreeNode(94)],
        [TreeNode(-10), TreeNode(-23), TreeNode(45), TreeNode(25), TreeNode(46)],
        [TreeNode(9), TreeNode(7), None, None, TreeNode(1), TreeNode(8), TreeNode(10), None, TreeNode(12)],
        [TreeNode(3), TreeNode(2), TreeNode(3), None, TreeNode(3), None, TreeNode(1)]
    ]

    input_trees = []
    for list_of_nodes in list_of_trees:
        tree = BinaryTree(list_of_nodes)
        input_trees.append(tree)

    x = 1
    for tree in input_trees:
        print(x, ".\tInput Tree:", sep = "")
        display_tree(tree.root)
        x += 1
        print("\n\tVertical order traversal: ", vertical_order(tree.root), sep="")
        print("-" * 100)