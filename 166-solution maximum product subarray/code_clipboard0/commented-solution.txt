def max_product(nums):
    # Check if the input list is empty, return 0 if it is
    if len(nums) == 0:
        return 0

    # Initialize max_so_far and min_so_far with the first element in the list, and result with max_so_far
    max_so_far = nums[0]
    min_so_far = nums[0]
    result = max_so_far

    # Loop through the rest of the elements in the list
    for i in range(1, len(nums)):
        curr = nums[i]

        # Update the max_so_far and min_so_far with the maximum and minimum of curr, max_so_far * curr, and min_so_far * curr
        # temp_max_so_far is used to store the value of max_so_far so that it does not get updated while calculated min_so_far
        temp_max_so_far = max(curr, max_so_far * curr, min_so_far * curr)
        min_so_far = min(curr, max_so_far * curr, min_so_far * curr)
        max_so_far = temp_max_so_far

        # Update result with the maximum of max_so_far and result
        result = max(max_so_far, result)

    # Return the final result
    return result

# Driver code
def main():
    input_bits = [
        [-2, 0, -1],
        [2, 3, -2, 4],
        [2, -5, 3, 1, -4, 0, -10, 2],
        [1, 2, 3, 0, 4],
        [5, 4, 3, 10, 4, 1],
    ]

    for i in range(len(input_bits)):
        print(i + 1, ".\t Input array: ", input_bits[i], sep="")
        print("\n\t Maximum product: ", max_product(input_bits[i]), sep="")
        print("-" * 100)

if __name__ == "__main__":
    main()