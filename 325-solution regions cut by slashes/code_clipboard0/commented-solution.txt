from union_find import UnionFind

def regions_by_slashes(grid):
    N = len(grid)
    find_union = UnionFind(4 * N * N)

    # Traversing the list
    for r, row in enumerate(grid):
        for c, val in enumerate(row):
            root = 4 * (r * N + c)

            if val in '/ ':

                # Connecting the north and west components of the box
                find_union.union(root + 0, root + 1)

                # Connecting the east and south componeents of the box
                find_union.union(root + 2, root + 3)

            if val in '\ ':

                # Connecting the north and east components of the box
                find_union.union(root + 0, root + 2)

                # Connecting the west and south components of the box
                find_union.union(root + 1, root + 3)

            # Connecting the south component of the current box with the north component of the box below it
            if r+1 < N:
                find_union.union(root + 3, (root + 4 * N) + 0)

            # Connecting the north component of the current box with the south component of the box above it
            if r-1 >= 0:
                find_union.union(root + 0, (root - 4 * N) + 3)

            # Connecting the east component of the current box with the west component of the box on its right
            if c+1 < N:
                find_union.union(root + 2, (root + 4) + 1)

            # Connecting the west component of the current box with the east component of the box on its left
            if c-1 >= 0:
                find_union.union(root + 1, (root - 4) + 2)

    # Finding the number of connected components
    return sum(find_union.find(x) == x for x in range(4 * N * N))

# driver code
def main():
    inputs = [["/\\", "\\/"], [" /", "  "], [" /", "/ "],
              [" /\\", "\\/ ", ' \\ '], [' \\/', " /\\", "\\/ "]]
    for i in range(len(inputs)):
        print(i + 1, '.\tInput list of strings: ', inputs[i], sep="")
        print('\tOutput: ', regions_by_slashes(inputs[i]))
        print('-' * 100)


if __name__ == "__main__":
    main()