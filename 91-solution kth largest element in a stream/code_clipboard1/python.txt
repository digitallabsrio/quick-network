import heapq

def print_heap_with_markers(arr, p_value):
    out = "["
    for i in range(len(arr)):
        if p_value == i:
            out += '«'
            out += str(arr[i]) + '»' + ", "
        else:
            out += str(arr[i]) + ", "
    out = out[0:len(out) - 2]
    out += "]"
    return out


class KthLargest:
    # constructor to initialize heap and add values in it
    def __init__(self, k, nums):
        print("\tInitializing the heap")
        self.k = k
        self.top_k_heap = nums
        heapq.heapify(self.top_k_heap)
        print("\t\tk = ", self.k)
        print("\t\tHeap: ", self.top_k_heap)
        while len(self.top_k_heap) > k:
            print("\t\tLength of the heap = ", len(self.top_k_heap), ", which is greater than k = ", k, sep = "")
            print("\t\t\tPopping from the heap: ", self.top_k_heap, " ⟶ ", end = "")
            heapq.heappop(self.top_k_heap)
            print(self.top_k_heap)

    # adds element in the heap
    def add(self, val):
        print("\t\tAdding ", val, " to the heap: ", self.top_k_heap, " ⟶ ", end = "", sep = "")
        heapq.heappush(self.top_k_heap, val)
        print(self.top_k_heap)
        if len(self.top_k_heap) > self.k:
            print("\t\tHeap size = ", len(self.top_k_heap), sep = "")
            print("\t\tk = ", self.k, sep = "")
            print("\t\tSince heap size > k, popping from the heap: ", print_heap_with_markers(self.top_k_heap, 0), " ⟶ ", end = "", sep = "")
            heapq.heappop(self.top_k_heap)
            print(self.top_k_heap, "\n", sep = "")


def main():
    nums = [3, 6, 9, 10]
    temp = [3, 6, 9, 10]
    print("Initial stream: ", nums, sep = "")
    k_largest = KthLargest(3, nums)
    val = [4, 7, 10, 8, 15]
    print()
    for i in range(len(val)):
        print("\tAdding a new number ", val[i], " to the stream", sep = "")
        temp.append(val[i])
        print("\t\tNumber stream: ", temp, sep = "")
        k_largest.add(val[i])
        print("-"*100)


if __name__ == "__main__":
    main()