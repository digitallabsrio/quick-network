from linked_list import LinkedList
from print_list import print_list_with_forward_arrow


def reorder_list(head):
    if not head:
        return head
    
    # find the middle of linked list
    # in 1->2->3->4->5->6 find 4 
    slow = fast = head
    while fast and fast.next:
        slow = slow.next
        fast = fast.next.next 
        
    # reverse the second part of the list
    # convert 1->2->3->4->5->6 into 1->2->3 and 6->5->4
    # reverse the second half in-place
    prev, curr = None, slow
    while curr:
        curr.next, prev, curr = prev, curr, curr.next       

    # merge two sorted linked lists
    # merge 1->2->3 and 6->5->4 into 1->6->2->5->3->4
    first, second = head, prev
    while second.next:
        first.next, first = second, first.next
        second.next, second = first, second.next
    
    return head


def main():
    input_list = [
        [1, 1, 2, 2, 3, -1, 10, 12],
        [10, 20, -22, 21, -12],
        [1, 1, 1],
        [-2, -5, -6, 0, -1, -4],
        [3, 1, 5, 7, -4, -2, -1, -6]
    ]

    for i, inp in enumerate(input_list):
        # Creating Linked Lists
        obj = LinkedList()
        obj.create_linked_list(inp)

        # Displaying original linked list
        print(i + 1, ".\tOriginal list: ", end="", sep="")
        print_list_with_forward_arrow(obj.head)
        print()

        # Calling the reorder_list function
        obj.head = reorder_list(obj.head)

        # Displaying modified linked list
        print("\tAfter folding:", end=" ")
        print_list_with_forward_arrow(obj.head)
        if i != len(input_list) - 1:
            print("\n", "-"*100, sep="")


if __name__ == '__main__':
    main()