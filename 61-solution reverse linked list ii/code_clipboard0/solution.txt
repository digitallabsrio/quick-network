from __future__ import print_function
from linked_list import LinkedList
from print_list import print_list_with_forward_arrow


# Assume that the linked list has left to right nodes.
# Reverse left to right nodes of the given linked list.
def reverse(head, left, right):
    prev = None
    curr = head

    while right >= left:
        next  = curr.next
        curr.next = prev
        prev = curr
        curr = next
        right -= 1

    return prev


def reverse_between(head, left, right):
    curr = head
    lpn= None
    right_n = None
    reverse_head = None
    count = 1

    while count < left and curr:
        lpn = curr
        curr = curr.next
        count += 1

    if curr:
        rpn = curr
        while count <= right and rpn:
        
            right_n=rpn
            rpn = right_n.next
            count += 1

        if right_n:
            reverse_head = reverse(curr, left, right)

        if lpn:
            lpn.next = reverse_head

        if rpn:
            tmp = reverse_head
            while tmp.next:
                tmp = tmp.next
            tmp.next = rpn

    if lpn:
        return head
    else:
        return reverse_head


# Driver Code
def main():
    input_list = [
        [1, 2, 3, 4, 5, 6, 7],
        [6, 9, 3, 10, 7, 4, 6],
        [6, 9, 3, 4],
        [6, 2, 3, 6, 9],
        [6, 2]
    ]
    left = [1, 3, 2, 1, 1]
    right = [5, 6, 4, 3, 2]

    for i in range(len(input_list)):

        input_linked_list = LinkedList()
        input_linked_list.create_linked_list(input_list[i])

        print(i + 1, ".\tOriginal linked list is: ", end="", sep="")
        print_list_with_forward_arrow(input_linked_list.head)
        if left[i] <= 0:
            print("\n\tThe expected 'left' and 'right' to have \
            value from 1 to length of the linked list only.")
        else:
            result = reverse_between(input_linked_list.head, left[i], right[i])
            print("\n\tReversed linked list is: ", end="")
            print_list_with_forward_arrow(result)
        print("\n", "-"*100, sep="")


if __name__ == '__main__':
    main()